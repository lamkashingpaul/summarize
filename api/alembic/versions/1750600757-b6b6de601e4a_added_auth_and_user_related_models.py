"""Added auth and user related models

Revision ID: b6b6de601e4a
Revises: 4e3c52fe65fd
Create Date: 2025-06-22 13:59:17.031219+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = 'b6b6de601e4a'
down_revision: Union[str, None] = '4e3c52fe65fd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('email', sa.TEXT(), nullable=False),
    sa.Column('is_email_verified', sa.BOOLEAN(), nullable=False),
    sa.Column('image_url', sa.TEXT(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('verifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('identifier', sa.TEXT(), nullable=False),
    sa.Column('value', sa.TEXT(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('accounts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('account_id', sa.TEXT(), nullable=False),
    sa.Column('provider_id', sa.TEXT(), nullable=False),
    sa.Column('access_token', sa.TEXT(), nullable=False),
    sa.Column('refresh_token', sa.TEXT(), nullable=False),
    sa.Column('id_token', sa.TEXT(), nullable=False),
    sa.Column('password', sa.TEXT(), nullable=False),
    sa.Column('scope', sa.TEXT(), nullable=False),
    sa.Column('access_token_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('refresh_token_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('token', sa.TEXT(), nullable=False),
    sa.Column('ip_address', sa.TEXT(), nullable=False),
    sa.Column('user_agent', sa.TEXT(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.alter_column('request_logs', 'client_ip',
               existing_type=sa.VARCHAR(length=45),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('request_logs', 'method',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('request_logs', 'path',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('request_logs', 'path',
               existing_type=sa.TEXT(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('request_logs', 'method',
               existing_type=sa.TEXT(),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.alter_column('request_logs', 'client_ip',
               existing_type=sa.TEXT(),
               type_=sa.VARCHAR(length=45),
               existing_nullable=False)
    op.drop_table('sessions')
    op.drop_table('accounts')
    op.drop_table('verifications')
    op.drop_table('users')
    # ### end Alembic commands ###
